name: Deploy

on: [push]

jobs:
  Test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true

      # Cache
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library

      # Test
      - name: Run tests
        uses: game-ci/unity-test-runner@v2
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          githubToken: ${{ secrets.GITHUB_TOKEN }}    
          customParameters: -enableCodeCoverage -coverageOptions "generateAdditionalMetrics;generateHtmlReport;generateHtmlReportHistory;generateBadgeReport;" -debugCodeOptimization -assemblyfilters:"+Application;+Domain;+Infrastructure;+Presentation;-EditModeTests;-NavMeshComponents-NavMeshComponentsEditor"

      # Output
      - uses: actions/upload-artifact@v2
        if: always()
        with:
          name: Test results
          path: |
            artifacts
            CodeCoverage
            
      - name: Deploy ðŸš€
        uses: JamesIves/github-pages-deploy-action@4.1.1
        if: always()
        run:|
            ls -la
        with:
          branch: main # The branch the action should deploy to.
          folder: CodeCoverage/Report # The folder the action should deploy.

          
  build:
    name: Build
    needs: Test
    runs-on: ubuntu-latest
    steps:
      # Checkout
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          lfs: true
          
      # Cache
      - uses: actions/cache@v2
        with:
          path: Library
          key: Library

      # Build
      - name: Build project
        uses: game-ci/unity-builder@v2
        id: build
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
        with:
          targetPlatform: StandaloneWindows
          allowDirtyBuild: true
          versioning: Semantic 
          buildName: GAMEJAM 20201
          
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.build.outputs.buildVersion }}
          release_name: Release ${{ steps.build.outputs.buildVersion }}

      # Output
      - uses: actions/upload-artifact@v2
        with:
          name: Build
          path: build
